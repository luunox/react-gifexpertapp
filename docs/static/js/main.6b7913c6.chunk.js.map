{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","type","value","onChange","e","target","onKeyPress","charCode","trim","length","cats","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","style","marginTop","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","dat","GifExpertApp","categories","marginLeft","cat","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAC3B,EAAoCC,mBAAS,cAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACE,mCACE,uBACMC,KAAK,OACLC,MAAOH,EACPI,SAjBgB,SAACC,GAEzBJ,EAAcI,EAAEC,OAAOH,QAgBfI,WAbW,SAACF,GACD,KAAfA,EAAEG,SAAkBR,EAAWS,OAAOC,OAAS,IACjDZ,GAAc,SAAAa,GAAI,OAAKX,GAAL,mBAAoBW,OACtCV,EAAc,W,+BCdPW,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EAC1B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATjB,kBAcdM,GAdc,4CAAH,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIlC,OACE,sBAAKc,UAAU,yCAAf,UAEE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,wBAAQO,MAAO,CAACC,UAAW,QAA3B,SAAwCR,QCNjCS,EAAU,SAAC,GAAgB,IAAfrB,EAAc,EAAdA,SAEvB,ECH0B,SAACA,GAE3B,MAA0Bd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WACT1B,EAAQC,GACP0B,MAAK,SAAAC,GAAI,OACRC,YAAW,WACTJ,EAAS,CACPjB,KAAMoB,EACNL,SAAS,MAEV,SAEJ,CAACtB,IAEGuB,EDhBwBM,CAAa7B,GAAhCa,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAEpB,OACE,qCACE,oBAAIN,UAAU,oCAAd,SAAmDhB,IAElDsB,GAAW,oBAAIN,UAAU,mCAAd,yBAEZ,qBAAKA,UAAU,YAAf,SACKH,EAAOJ,KAAI,SAAAqB,GAAG,OACb,cAAC,EAAD,eAEgBA,GADCA,EAAInB,aEelBoB,MA5Bf,WAEE,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAMA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,qBAAKkC,MAAO,CAACc,WAAY,QAAzB,SAEID,EAAWvB,KAAK,SAAAyB,GAAG,OACjB,cAAC,EAAD,CAEQlC,SAAUkC,GADLA,YCVVC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCDdO,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.6b7913c6.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n  const [inputValue, setInputValue] = useState('Hola mundo')\r\n\r\n  const handleInputChange = (e) => {\r\n    // console.log(e.target.value)\r\n    setInputValue(e.target.value)\r\n  }\r\n\r\n  const handleSubmit = (e) => {\r\n    if (e.charCode === 13 & inputValue.trim().length > 2) {\r\n      setCategories(cats => [inputValue, ...cats])\r\n      setInputValue('')\r\n    }\r\n  }\r\n    // console.log(e.target.value)\r\n  return (\r\n    <>\r\n      <input\r\n            type=\"text\"\r\n            value={inputValue}\r\n            onChange={handleInputChange}\r\n            onKeyPress={handleSubmit}\r\n      />\r\n    </>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=4S1RzhuYaM2o9BQAiy36hdwLBGsUQEfo`\r\n  const resp = await fetch(url)\r\n  const {data} = await resp.json()\r\n\r\n  const gifs = data.map(img =>{\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    }\r\n  })\r\n\r\n  // console.log(gifs)\r\n  return gifs\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n  // console.log(id, title, url)\r\n\r\n  return (\r\n    <div className=\"card animate__animated animate__fadeIn\">\r\n      {/* {img.title} */}\r\n      <img src={url} alt={title} />\r\n      <center style={{marginTop: 10 + 'px'}}>{title}</center>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem'\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n  const {data:images, loading} = useFetchGifs(category)\r\n\r\n  return (\r\n    <>\r\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n      {loading && <h4 className=\"animate__animated animate__flash\">Cargando...</h4>}\r\n\r\n      <div className=\"card-grid\">\r\n          {images.map(dat =>\r\n            <GifGridItem\r\n                        key={dat.id}\r\n                        {...dat}\r\n            />\r\n          )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\"\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  })\r\n\r\n  useEffect( () => {\r\n    getGifs(category)\r\n    .then(imgs => \r\n      setTimeout(() => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false,\r\n        })\r\n      }, 10)\r\n      )\r\n  }, [category])\r\n\r\n  return state\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nfunction GifExpertApp() {\r\n\r\n  const [categories, setCategories] = useState(['Elizabeth'])\r\n\r\n  // const handleAdd = () => {\r\n  //   setCategories(['Goblin', ...categories])\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr/>\r\n\r\n      <div style={{marginLeft: 10+'px'}}>\r\n        {\r\n          categories.map( cat => (\r\n            <GifGrid\r\n                    key={cat} \r\n                    category={cat} />\r\n          ))\r\n          // return <li key={cat}>{cat}</li>\r\n        }\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render (\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}